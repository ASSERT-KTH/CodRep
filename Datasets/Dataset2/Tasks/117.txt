extends BaseAttributeValuePeer

package org.tigris.scarab.om;

// JDK classes
import java.util.*;

// Village classes
import com.workingdogs.village.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.util.*;
import org.apache.turbine.util.db.*;
import org.apache.turbine.util.db.map.*;
import org.apache.turbine.util.db.pool.DBConnection;
import org.apache.turbine.services.cache.*;
import org.apache.turbine.services.*;

// Local classes
import org.tigris.scarab.om.map.*;

/** 
  * The skeleton for this class was autogenerated by Torque on:
  *
  * [Wed Feb 28 16:36:26 PST 2001]
  *
  *  You should add additional methods to this class to meet the
  *  application requirements.  This class will only be generated as
  *  long as it does not already exist in the output directory.
  */
public class AttributeValuePeer 
    extends ZZBaseAttributeValuePeer
{
    private static final String keyPrefix = "AttributeValueSubClass"; 
    private static String getClassCacheKey(String key)
    {
        return new StringBuffer(keyPrefix.length() + key.length())
            .append(keyPrefix).append(key).toString();
    }

    /** 
     * Get the className appropriate for a row in the 
     * SCARAB_ISSUE_ATTRIBUTE_VALUE table
     */
    public static Class getOMClass(Record record, int offset) 
        throws Exception
    {
        NumberKey attId = new NumberKey(record.getValue(offset-1 + 2)
                                        .asString());
        Attribute attribute = Attribute.getInstance(attId);
        String className = attribute.getAttributeType().getJavaClassName(); 

        TurbineGlobalCacheService tgcs = 
            (TurbineGlobalCacheService)TurbineServices
            .getInstance().getService(GlobalCacheService.SERVICE_NAME);

        String key = getClassCacheKey(className);
        Class c = null;
        try
        {
            c = (Class)tgcs.getObject(key).getContents();
        }
        catch (ObjectExpiredException oee)
        {
            c = Class.forName(className);
            tgcs.addObject(key, new CachedObject(c));
        }
        
        return c;
    }
}
