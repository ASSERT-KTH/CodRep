import org.columba.mail.gui.table.action.ViewHeaderListAction;

//The contents of this file are subject to the Mozilla Public License Version 1.1
//(the "License"); you may not use this file except in compliance with the 
//License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
//
//Software distributed under the License is distributed on an "AS IS" basis,
//WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
//for the specific language governing rights and
//limitations under the License.
//
//The Original Code is "The Columba Project"
//
//The Initial Developers of the Original Code are Frederik Dietz and Timo Stich.
//Portions created by Frederik Dietz and Timo Stich are Copyright (C) 2003. 
//
//All Rights Reserved.
package org.columba.mail.gui.table.command;

import org.columba.api.command.ICommandReference;
import org.columba.api.command.IWorkerStatusController;
import org.columba.api.gui.frame.IFrameMediator;
import org.columba.core.command.Command;
import org.columba.core.command.StatusObservableImpl;
import org.columba.core.command.Worker;
import org.columba.core.gui.selection.ISelectionListener;
import org.columba.core.gui.selection.SelectionChangedEvent;
import org.columba.mail.command.IMailFolderCommandReference;
import org.columba.mail.folder.IMailFolder;
import org.columba.mail.folder.IMailbox;
import org.columba.mail.gui.frame.TableViewOwner;
import org.columba.mail.gui.tree.action.ViewHeaderListAction;
import org.columba.mail.gui.tree.selection.TreeSelectionChangedEvent;
import org.columba.mail.message.IHeaderList;

/**
 * Show header list in message list component.
 * <p>
 * Registers as tree selection listener.
 * 
 * @author Timo Stich (tstich@users.sourceforge.net)
 * @author fdietz
 */
public class ViewHeaderListCommand extends Command implements
		ISelectionListener {

	private IHeaderList headerList;

	private IMailbox folder;

	private boolean updateGui;

	private IFrameMediator mediator;

	public ViewHeaderListCommand(IFrameMediator mediator,
			ICommandReference reference) {
		super(reference);

		this.mediator = mediator;

		// Register as listener to the SelectionManger
		// to check for selection changes
		updateGui = true;
		mediator.getSelectionManager().getHandler("mail.tree")
				.addSelectionListener(this);

		priority = Command.REALTIME_PRIORITY;
	}

	/**
	 * @see org.columba.api.command.Command#updateGUI()
	 */
	public void updateGUI() throws Exception {
		mediator.getSelectionManager().getHandler("mail.tree")
				.removeSelectionListener(this);

		// Update only if the selection did not change
		if (updateGui) {
			((TableViewOwner) mediator).getTableController().showHeaderList(
					folder, headerList);
		}

	}

	/**
	 * @see org.columba.api.command.Command#execute(Worker)
	 */
	public void execute(IWorkerStatusController worker) throws Exception {
		// Register as SelectionListener to track the selection
		// of the tree
		if (!updateGui)
			return;

		IMailFolderCommandReference r = (IMailFolderCommandReference) getReference();

		folder = (IMailbox) r.getSourceFolder();

		// register for status events
		((StatusObservableImpl) folder.getObservable()).setWorker(worker);

		// fetch the headerlist
		try {
			headerList = (folder).getHeaderList();
		} catch (Exception e) {
			updateGui = false;

			// Reset the selection
			mediator.getSelectionManager().getHandler("mail.tree")
					.setSelection(null);
			new ViewHeaderListAction(mediator).actionPerformed(null);

			// ((TableViewOwner) frameMediator).getTableController().clear();

			throw e;
		}

		updateGui &= !worker.cancelled();
	}

	/**
	 * @see org.columba.core.gui.selection.ISelectionListener#selectionChanged(org.columba.core.gui.selection.SelectionChangedEvent)
	 */
	public void selectionChanged(SelectionChangedEvent e) {

		// old command-specific selection
		IMailFolderCommandReference r = (IMailFolderCommandReference) getReference();

		// new selection
		IMailFolder[] folders = ((TreeSelectionChangedEvent) e).getSelected();
		// abort if nothing selected
		if (folders.length == 0)
			return;

		// cancel command execution/updateGUI methods, if folder selection
		// has been modified
		if (r.getSourceFolder().getUid() != folders[0].getUid())
			updateGui = false;
	}
}
 No newline at end of file