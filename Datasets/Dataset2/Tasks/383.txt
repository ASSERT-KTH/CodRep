import org.columba.core.main.MainInterface;

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

package org.columba.mail.gui.composer;

import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.Vector;

import javax.swing.JFileChooser;

import org.columba.mail.message.ComposerAttachment;
import org.columba.mail.message.MimeHeader;
import org.columba.mail.message.MimePart;
import org.columba.mail.util.MailResourceLoader;
import org.columba.main.MainInterface;

/**
 * @author frd
 *
 * To change this generated comment edit the template variable "typecomment":
 * Window>Preferences>Java>Templates.
 * To enable and disable the creation of type comments go to
 * Window>Preferences>Java>Code Generation.
 */
public class AttachmentController implements KeyListener {
	AttachmentView view;
	ComposerModel model;

	AttachmentActionListener actionListener;
	AttachmentMenu menu;

	private JFileChooser fileChooser;

	public AttachmentController(ComposerModel model) {
		this.model = model;

		view = new AttachmentView(model);


		actionListener = new AttachmentActionListener(this);

		menu = new AttachmentMenu(this);

		view.addPopupListener(new PopupListener());

		fileChooser = new JFileChooser();
	}

	public ActionListener getActionListener() {
		return actionListener;

	}

	public void installListener() {
		view.installListener(this);
	}

	public void updateComponents(boolean b) {
		if (b == true) {
			Vector attachments = model.getAttachments();

			for (int i = 0; i < attachments.size(); i++) {
				MimePart p = (MimePart) attachments.get(i);
				view.add( p);
			}
		}
		else
		{
			Vector attachments= model.getAttachments();
			attachments.clear();
			
			for ( int i=0; i<view.count(); i++ )
			{
				MimePart mp = view.get(i);
				attachments.add(mp);
			}
		}
	}

	public void add(MimePart part) {

		view.add(part);

		model.addMimePart(part);
	}

	public void removeSelected() {

		Object[] mp = view.getSelectedValues();
		for ( int i=0; i<mp.length; i++ )
		{
			view.remove( (MimePart) mp[i] );
		}
		
	}

	public void addFileAttachment() {

		int returnValue;
		File[] files;

		fileChooser.setDialogTitle(MailResourceLoader.getString("menu","mainframe","composer_attach_file")); //$NON-NLS-1$
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fileChooser.setMultiSelectionEnabled(true);
		returnValue = fileChooser.showOpenDialog(view);
		if (returnValue == JFileChooser.APPROVE_OPTION) {
			files = fileChooser.getSelectedFiles();

			for (int i = 0; i < files.length; i++) {
				File file = files[i];

				String fileext = null;
				String filename = file.getName();
				if (filename.indexOf('.') != -1) {
					fileext = filename.substring(filename.lastIndexOf('.') + 1);
				}

				String mimetype = MainInterface.ext2mime.getMimeType(fileext);

				MimeHeader header =
					new MimeHeader(
						mimetype.substring(0, mimetype.indexOf('/')),
						mimetype.substring(mimetype.indexOf('/') + 1));

				ComposerAttachment mimePart = new ComposerAttachment(header, file);

				view.add(mimePart);
			}

		}
	}

	/******************* KeyListener ****************************/

	public void keyPressed(KeyEvent k) {
		switch (k.getKeyCode()) {
			case (KeyEvent.VK_DELETE) :
				{
					if (view.count() > 0)
						removeSelected();
					break;
				}
		}
	}

	public void keyReleased(KeyEvent k) {
	}

	public void keyTyped(KeyEvent k) {
	}

	/********************** MouseListener *****************************/

	class PopupListener extends MouseAdapter {
		public void mousePressed(MouseEvent e) {
			maybeShowPopup(e);
		}

		public void mouseReleased(MouseEvent e) {
			maybeShowPopup(e);
		}

		private void maybeShowPopup(MouseEvent e) {
			if (e.isPopupTrigger()) {

				Object[] values = view.getSelectedValues();
				if (values.length == 0)
					view.fixSelection(e.getX(), e.getY());

				menu.show(e.getComponent(), e.getX(), e.getY());
			}
		}
	}

}
 No newline at end of file