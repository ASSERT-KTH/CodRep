import org.columba.mail.gui.table.model.MessageNode;

//The contents of this file are subject to the Mozilla Public License Version 1.1
//(the "License"); you may not use this file except in compliance with the 
//License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
//
//Software distributed under the License is distributed on an "AS IS" basis,
//WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
//for the specific language governing rights and
//limitations under the License.
//
//The Original Code is "The Columba Project"
//
//The Initial Developers of the Original Code are Frederik Dietz and Timo Stich.
//Portions created by Frederik Dietz and Timo Stich are Copyright (C) 2003. 
//
//All Rights Reserved.
package org.columba.mail.gui.table.plugins;

import java.awt.Component;

import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.SwingConstants;

import org.columba.core.gui.util.ImageLoader;
import org.columba.mail.gui.table.util.MessageNode;
import org.columba.mail.message.Flags;

public class StatusRenderer extends DefaultLabelRenderer {
	boolean bool;

	ImageIcon image1;
	ImageIcon image2;
	ImageIcon image4;
	ImageIcon image3;
	ImageIcon image5;
	ImageIcon image6;

	public StatusRenderer(JTree tree) {
		super(tree);

		setHorizontalAlignment(SwingConstants.CENTER);
		//setOpaque(true);

		image1 = ImageLoader.getSmallImageIcon("reply_small.png");
		image2 = ImageLoader.getSmallImageIcon("mail-new.png");
		image3 = ImageLoader.getSmallImageIcon("stock_delete-16.png");
		image4 = ImageLoader.getSmallImageIcon("mark-as-important-16.png");
		image5 = ImageLoader.getSmallImageIcon("mail-read.png");
		image6 = ImageLoader.getSmallImageIcon("mail-new.png");

	}

	public Component getTableCellRendererComponent(
		JTable table,
		Object value,
		boolean isSelected,
		boolean hasFocus,
		int row,
		int column) {

		super.getTableCellRendererComponent(
			table,
			value,
			isSelected,
			hasFocus,
			row,
			column);

		if (value == null) {
			setIcon(null);
			return this;
		}

		if (value instanceof String) {
			System.out.println(
				"statusrenderer-> instanceof String not expected");

			return this;
		}

		Flags flags = (Flags) ((MessageNode)value).getHeader().getFlags();

		if (flags.getDeleted()) {

			setIcon(image3);

			//setToolTipText("Marked as expunged");
		} else if (flags.getAnswered()) {
			setIcon(image1);
			//setToolTipText("Marked as answered");
		} else if (!flags.getSeen()) {
			setIcon(image6);
			//setToolTipText("Marked as unread");
		} else if (flags.getSeen()) {
			//setIcon( image5 );
			setIcon(image5);
			//setToolTipText("Marked as read");
		} else {
			setIcon(null);

		}

		return this;
	}
}
 No newline at end of file