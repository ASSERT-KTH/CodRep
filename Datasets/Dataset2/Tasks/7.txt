addRModuleUser(relation);

package org.tigris.scarab.om;

// JDK classes
import java.util.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.RunData;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;
import org.apache.turbine.util.db.IDBroker;

import org.tigris.scarab.util.ScarabException;

/** 
  * The skeleton for this class was autogenerated by Torque on:
  *
  * [Wed Feb 28 16:36:26 PST 2001]
  *
  * You should add additional methods to this class to meet the
  * application requirements.  This class will only be generated as
  * long as it does not already exist in the output directory.

  */
public class Module 
    extends BaseModule
    implements Persistent
{
    private static final NumberKey ROOT_ID = new NumberKey("0");

    /**
     * Creates a new Issue.
     *
     */
    public Issue getNewIssue(ScarabUser user)
        throws Exception
    {
        Issue issue = new Issue();
        issue.setModule( this );
        issue.setModifiedBy((NumberKey)user.getPrimaryKey());
        issue.setCreatedBy((NumberKey)user.getPrimaryKey());
        java.util.Date now = new java.util.Date();
        issue.setModifiedDate(now);
        issue.setCreatedDate(now);
        issue.setDeleted(false);
        return issue;
    }

    /**
     * gets a list of all of the Attributes in a Module based on the Criteria.
     */
    public Attribute[] getAttributes(Criteria criteria)
        throws Exception
    {
        List moduleAttributes = 
            getRModuleAttributes(criteria);

        Attribute[] attributes = new Attribute[moduleAttributes.size()];
        for ( int i=0; i<moduleAttributes.size(); i++ ) 
        {
            attributes[i] = 
               ((RModuleAttribute) moduleAttributes.get(i)).getAttribute();
        }
        return attributes;
    }

    /**
     * gets a list of all of the Attributes.
     */
    public Attribute[] getAllAttributes()
        throws Exception
    {
        return getAttributes(new Criteria());
    }

    /**
     * Saves the module into the database
     */
    public void save() throws Exception
    {
        // if new, relate the Module to the user who created it.
        if ( isNew() ) 
        {
            RModuleUser relation = new RModuleUser();
            if ( getOwnerId() == null ) 
            {
                throw new ScarabException("Can't save a project without" + 
                    "first assigning an owner.");
            }         
            relation.setUserId(getOwnerId());
            relation.setDeleted(false);
            addRModuleUsers(relation);

            // make sure the code has a value;
            String code = getCode();
            if ( code == null || code.length() == 0 ) 
            {
                if ( getParentId().equals(ROOT_ID) ) 
                {
                    throw new ScarabException("A top level module addition was"
                        + " attempted without assigning a Code");
                }
            
                setCode(getModuleRelatedByParentId().getCode());

                // insert a row into the id_table.
                Criteria criteria = new Criteria(
                    ModulePeer.getTableMap().getDatabaseMap().getName(), 5)
                    .add(IDBroker.TABLE_NAME, getCode())
                    .add(IDBroker.NEXT_ID, 1)
                    .add(IDBroker.QUANTITY, 1);
                BasePeer.doInsert(criteria);
            }
            
        }
        super.save();        
    }

    /**
        calls the doPopulate() method with validation false
    */
    public Module doPopulate(RunData data)
        throws Exception
    {
        return doPopulate(data, false);
    }

    /**
        populates project based on the existing project data from POST
    */
    public Module doPopulate(RunData data, boolean validate)
        throws Exception
    {
        String prefix = ""; //getQueryKey().toLowerCase();

        if ( isNew() ) 
        {
            String project_id = data.getParameters()
                .getString(prefix + "id", null); 
            if (validate)
            {
                if (project_id == null)
                    throw new Exception ( "Missing project_id!" );
            }
            setPrimaryKey(new NumberKey(project_id));
            // setCreatedBy( ((ScarabUser)data.getUser()).getPrimaryKey() );
            // setCreatedDate( new Date() );
        }

        String name = data.getParameters().getString(prefix + "name",null);
        String desc = data.getParameters()
            .getString(prefix + "description",null);
        
        if (validate)
        {
            if (! StringUtils.isValid(name))
                throw new Exception ( "Missing project name!" );
            if (! StringUtils.isValid(desc))
                throw new Exception ( "Missing project description!" );
        }

        setName( StringUtils.makeString( name ));
        setDescription( StringUtils.makeString( desc ));
        setUrl( StringUtils.makeString(
            data.getParameters().getString(prefix + "url") ));
        setOwnerId( new NumberKey(data.getParameters().getString(prefix + "ownerid") ));
        setQaContactId( new NumberKey(data.getParameters()
                        .getString(prefix + "qacontactid") ));
        return this;
    }
}