ShutdownManager.getInstance().register(new Runnable() {

// The contents of this file are subject to the Mozilla Public License Version
// 1.1
//(the "License"); you may not use this file except in compliance with the
//License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
//
//Software distributed under the License is distributed on an "AS IS" basis,
//WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
//for the specific language governing rights and
//limitations under the License.
//
//The Original Code is "The Columba Project"
//
//The Initial Developers of the Original Code are Frederik Dietz and Timo
// Stich.
//Portions created by Frederik Dietz and Timo Stich are Copyright (C) 2003.
//
//All Rights Reserved.
package org.columba.chat.config;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Properties;

import org.columba.core.shutdown.ShutdownManager;

/**
 * Configuration handling. Currently, using a Properties object to serialize an
 * {@link Account}. Default port for the jabber protocol is 5222.
 * 
 * @author fdietz
 */
public class Config {

	private File file = new File("altura.ini");

	private Account account;

	private Properties properties;

	private static Config instance;

	/**
	 *  
	 */
	private Config() {

		if ( file.exists()  )
			load();
		else
			account = new Account();

		ShutdownManager.getShutdownManager().register(new Runnable() {

			public void run() {
				try {
					save();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public static Config getInstance() {
		if ( instance == null ) {
			instance = new Config();
		}
		return instance;
	}

	/**
	 * @return Returns the account.
	 */
	public Account getAccount() {
		return account;
	}

	/**
	 * @param account
	 *            The account to set.
	 */
	public void setAccount(Account account) {
		this.account = account;
	}

	/**
	 * Load configuration from disk. Automatically called on application
	 * startup.
	 */
	private void load() {
		// use key/value properties file
		properties = new Properties();
		
		// load configuraation
		try {
			// open stream to file
			InputStream is = new BufferedInputStream(new FileInputStream(file));
			// load properties from stream
			properties.load(is);
			// close stream
			is.close();
		} catch (FileNotFoundException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		}

		// create account object
		account = new Account(properties.getProperty("id"));

		if (properties.getProperty("host") != null)
			account.setHost(properties.getProperty("host"));
		else
			account.setHost("jabber.org");

		if (properties.getProperty("password") != null)
			account.setPassword(properties.getProperty("password")
					.toCharArray());

		if (properties.getProperty("resource") != null)
			account.setResource(properties.getProperty("resource"));
		else
			account.setResource("Altura");

		if (properties.getProperty("enable_ssl") != null)
			account.setEnableSSL(new Boolean(properties
					.getProperty("enable_ssl")).booleanValue());
		else
			account.setEnableSSL(true);

		if (properties.getProperty("port") != null)
			account.setPort(new Integer(properties.getProperty("port"))
					.intValue());
		else
			account.setPort(5222);

	}

	/**
	 * Save configuration to file. Automatically called by using the system
	 * shutdown hook.
	 *  
	 */
	private void save() {
		if ( properties == null)
			properties = new Properties();
		
		// store account data in properties
		put("host", account.getHost());
		put("id", account.getId());
		if ( account.getPassword() != null)
			put("password", new String(account.getPassword()));
		put("resource", account.getResource());
		put("enable_ssl", new Boolean(account.isEnableSSL()).toString());
		put("port", new Integer(account.getPort()).toString());

		try {
			// create stream to file
			OutputStream os = new FileOutputStream(file);
			// save properties to file
			properties.store(os, "account");
			// close stream
			os.close();
		} catch (IOException e1) {

			e1.printStackTrace();
		}
	}

	private void put(String key, Object value) {
		if (value != null)
			properties.put(key, value);
	}

	private void put(String key, char[] value) {
		if (value != null)
			properties.put(key, value);
	}
}
 No newline at end of file