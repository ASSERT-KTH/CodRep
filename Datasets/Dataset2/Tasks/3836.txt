import org.columba.api.gui.frame.IFrameMediator;

//The contents of this file are subject to the Mozilla Public License Version 1.1
//(the "License"); you may not use this file except in compliance with the
//License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
//
//Software distributed under the License is distributed on an "AS IS" basis,
//WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
//for the specific language governing rights and
//limitations under the License.
//
//The Original Code is "The Columba Project"
//
//The Initial Developers of the Original Code are Frederik Dietz and Timo Stich.
//Portions created by Frederik Dietz and Timo Stich are Copyright (C) 2003.
//
//All Rights Reserved.
package org.columba.mail.gui.tree;

import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Logger;

import javax.swing.JPopupMenu;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeWillExpandListener;
import javax.swing.tree.ExpandVetoException;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

import org.columba.core.gui.frame.IFrameMediator;
import org.columba.core.gui.menu.ExtendablePopupMenu;
import org.columba.core.gui.menu.MenuXMLDecoder;
import org.columba.core.io.DiskIO;
import org.columba.core.xml.XmlElement;
import org.columba.mail.config.IFolderItem;
import org.columba.mail.folder.AbstractFolder;
import org.columba.mail.folder.IMailFolder;
import org.columba.mail.gui.tree.action.ViewHeaderListAction;
import org.columba.mail.gui.tree.util.FolderTreeCellRenderer;

/**
 * this class shows the the folder hierarchy
 */
public class TreeController implements TreeWillExpandListener,
		TreeSelectionListener, ITreeController {

	/** JDK 1.4+ logging framework logger, used for logging. */
	private static final Logger LOG = Logger
			.getLogger("org.columba.mail.gui.tree");

	private FolderTreeMouseListener mouseListener;

	private IMailFolder selectedFolder;

	private TreeView view;

	private IFrameMediator frameController;

	private ExtendablePopupMenu menu;

	/**
	 * Constructor for tree controller.
	 * 
	 * @param controller
	 *            the parent controller.
	 * @param model
	 *            the tree model to display.
	 */
	public TreeController(IFrameMediator controller, FolderTreeModel model) {
		frameController = controller;

		view = new TreeView(model);
		view.setSortingEnabled(false);

		view.addTreeWillExpandListener(this);

		mouseListener = new FolderTreeMouseListener(this);

		view.addMouseListener(mouseListener);

		// add tree selection listener
		view.addTreeSelectionListener(this);

		FolderTreeCellRenderer renderer = new FolderTreeCellRenderer();
		view.setCellRenderer(renderer);

		getView().setTransferHandler(new TreeViewTransferHandler(controller));
		getView().setDragEnabled(true);

		/*
		 * getView().getInputMap().put( KeyStroke.getKeyStroke(KeyEvent.VK_F2,
		 * 0), "RENAME"); RenameFolderAction action = new
		 * RenameFolderAction(mailFrameController);
		 * getView().getActionMap().put("RENAME", action);
		 */
	}

	/**
	 * Returns the tree view.
	 * 
	 * @return the tree view.
	 */
	public TreeView getView() {
		return view;
	}

	/**
	 * Set the specified folder as seleceted.
	 * 
	 * @param folder
	 *            the new selected folder.
	 */
	public void setSelected(IMailFolder folder) {
		view.clearSelection();

		TreePath path = folder.getSelectionTreePath();

		view.requestFocus();
		/*
		view.setLeadSelectionPath(path);
		view.setAnchorSelectionPath(path);
		*/
		view.setSelectionPath(path);
		view.expandPath(path);

		this.selectedFolder = folder;

	}

	/**
	 * Creates a Popup menu.
	 */
	public void createPopupMenu() {
		try {
			InputStream is = DiskIO.getResourceStream("org/columba/mail/action/tree_contextmenu.xml");
			
			menu = new MenuXMLDecoder(frameController).createPopupMenu(
					is);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Returns the pop up menu for the controller.
	 * 
	 * @return the pop up menu.
	 */
	public JPopupMenu getPopupMenu() {
		return menu;
	}

	/**
	 * Returns the selected folder.
	 * 
	 * @return the selected folder.
	 */
	public IMailFolder getSelected() {
		return selectedFolder;
	}

	/**
	 * Returns the mailFrameController.
	 * 
	 * @return MailFrameController
	 */
	public IFrameMediator getFrameController() {
		return frameController;
	}

	/**
	 * ****************** TreeWillExpand Interface
	 * ******************************
	 */

	/** {@inheritDoc} */
	public void treeWillExpand(TreeExpansionEvent e) throws ExpandVetoException {
		AbstractFolder treeNode = (AbstractFolder) e.getPath()
				.getLastPathComponent();

		if (treeNode == null) {
			return;
		}

		// save expanded state
		saveExpandedState(treeNode, e.getPath());
	}

	/** {@inheritDoc} */
	public void treeWillCollapse(TreeExpansionEvent e) {
		AbstractFolder treeNode = (AbstractFolder) e.getPath()
				.getLastPathComponent();

		if (treeNode == null) {
			return;
		}

		// save expanded state
		saveExpandedState(treeNode, e.getPath());
	}

	/**
	 * Saves the tree expanded state.
	 * 
	 * @param folder
	 *            the folder to get the configuration for.
	 * @param path
	 *            the tree path in the tree view.
	 */
	private void saveExpandedState(AbstractFolder folder, TreePath path) {
		IFolderItem item = folder.getConfiguration();

		XmlElement property = item.getElement("property");

		// Note: we negate the expanded state because this is
		//       a will-expand/collapse listener
		if (!getView().isExpanded(path)) {
			property.addAttribute("expanded", "true");
		} else {
			property.addAttribute("expanded", "false");
		}
	}

	/**
	 * 
	 * @see javax.swing.event.TreeSelectionListener#valueChanged(javax.swing.event.TreeSelectionEvent)
	 */
	public void valueChanged(TreeSelectionEvent e) {

		if (e.getPath() == null) {
			return;
		}

		// If the tree is in a DND action then we dont need to update all //
		// listeners, since this only a temporary folder selection.
		if (view.isInDndAction()) {
			return;
		}

		new ViewHeaderListAction(getFrameController()).actionPerformed(null);

	}

	/**
	 * @see org.columba.mail.gui.tree.ITreeController#getModel()
	 */
	public TreeModel getModel() {
		return getView().getModel();
	}
}
 No newline at end of file