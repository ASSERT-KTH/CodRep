import org.columba.core.action.BasicAction;

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

package org.columba.core.gui;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.Vector;

import org.columba.mail.gui.action.BasicAction;

/**
 * @author frd
 *
 * To change this generated comment edit the template variable "typecomment":
 * Window>Preferences>Java>Templates.
 * To enable and disable the creation of type comments go to
 * Window>Preferences>Java>Code Generation.
 */
public class FocusManager implements FocusListener {

	Vector list;
	BasicAction cutAction;
	BasicAction copyAction;
	BasicAction pasteAction;
	BasicAction deleteAction;
	
	FocusOwner lastFocusGained = null;
	FocusOwner lastFocusLost = null;

	public FocusManager() {
		list = new Vector();

	}

	public void setActions(
		BasicAction cutAction,
		BasicAction copyAction,
		BasicAction pasteAction,
		BasicAction deleteAction) {

		this.cutAction = cutAction;
		this.copyAction = copyAction;
		this.pasteAction = pasteAction;
		this.deleteAction = deleteAction;
	}

	public void registerComponent(FocusOwner c) {
		list.add(c);
		c.getComponent().addFocusListener(this);
	}

	protected FocusOwner searchOwner(Object component) {
		for (int i = 0; i < list.size(); i++) {
			FocusOwner owner = (FocusOwner) list.get(i);
			Object  c = owner.getComponent();

			if (c.equals(component))
				return owner;
		}

		return null;
	}

	protected void enableActions(boolean b) {
		/*
		if (b) {
			cutAction.setEnabled(true);
			copyAction.setEnabled(true);
			pasteAction.setEnabled(true);
			deleteAction.setEnabled(true);
		} else {
			cutAction.setEnabled(false);
			copyAction.setEnabled(false);
			pasteAction.setEnabled(false);
			deleteAction.setEnabled(false);
		}
		*/

	}

	public void focusGained(FocusEvent event) {
		//System.out.println("focus gained:" + event.getSource().toString());

		lastFocusGained = searchOwner(event.getSource());

		
		if (lastFocusGained.enableAction() == true)
			enableActions(true);
		
	}

	public void focusLost(FocusEvent event) {
		//System.out.println("focus lost:" + event.getSource().toString());
		
		lastFocusLost = searchOwner(event.getSource());
		
		if ( !lastFocusLost.equals(lastFocusGained) )
		{
			enableActions(false);
		}

	}

}
 No newline at end of file