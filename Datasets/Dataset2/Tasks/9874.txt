public String encode( String input, String charset) throws UnsupportedEncodingException

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


/** Document the purpose of this class.
 *
 * @version 1.0
 * @author Timo Stich
 */

package org.columba.mail.coder;

import java.io.UnsupportedEncodingException;


public class EncodedWordEncoder extends Encoder {

	private final static byte[] special = { '?' };

    public EncodedWordEncoder()
    {
    	super();
        coding = new String("encoded-word");        
    }
    
	public String encode( String input, String charset ) throws UnsupportedEncodingException 
	{	
		// If Charset is US-ASCII we don not need EncodedWords!
		if( charset.toLowerCase().equals( "us-ascii" ) ) return input;
		

		// QPEncoder with specialChar '?' and no linelengthlimit
		QuotedPrintableEncoder encoder = new QuotedPrintableEncoder();	
		encoder.setSpecial( special );
		encoder.setMaxLineLength( -1 );

		String encodedString = encoder.encode( input, charset );

		// finally repalce all ' ' with '_' (see EncodedWords RFC 2047)
		encodedString = encodedString.replace(' ', '_' );
		
		
		// Make portions of length <= 76 total
		String header = "=?"+charset+"?Q?";
		int maxLength = 76 - header.length() - 2;
		
		int pos = 0;
		int nextEnd;
		int lastIndex;
		StringBuffer output = new StringBuffer();
		
		// If longer than allowed -> cut
		while( encodedString.length() - pos > maxLength ) {
			output.append( header );		
			
			// ... but do not cut a '=??' QP-Code !
			nextEnd = pos+maxLength;
			lastIndex = encodedString.lastIndexOf( '=', nextEnd );
			if( (lastIndex > 0 ) && (nextEnd - lastIndex < 3 ) )
				nextEnd = lastIndex;
				
			output.append( encodedString.substring(pos, nextEnd) );
			pos = nextEnd;
			output.append( "?= \n\t" );			
		}		
		
		
		// don't forget the rest
		output.append( header );
		output.append( encodedString.substring(pos) );
		output.append( "?=" );				
		
		return output.toString();		
	}
    

}