public HeaderItem remove(int index) {

//The contents of this file are subject to the Mozilla Public License Version 1.1
//(the "License"); you may not use this file except in compliance with the 
//License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
//
//Software distributed under the License is distributed on an "AS IS" basis,
//WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
//for the specific language governing rights and
//limitations under the License.
//
//The Original Code is "The Columba Project"
//
//The Initial Developers of the Original Code are Frederik Dietz and Timo Stich.
//Portions created by Frederik Dietz and Timo Stich are Copyright (C) 2003. 
//
//All Rights Reserved.
package org.columba.addressbook.folder;

import java.util.Iterator;
import java.util.List;
import java.util.Vector;


/**
 * HeaderItemList wraps a list containing {@link HeaderItem} as
 * elements.
 * 
 * @author fdietz
 */
public class HeaderItemList {
    private List list;

    public HeaderItemList() {
        list = new Vector();
    }

    public HeaderItemList(List v) {
        list = v;
    }

    public void insertElementAt(HeaderItem item, int index) {
        list.set(index, item);
    }

    public void remove(HeaderItem item) {
        list.remove(item);
    }

    public int indexOf(HeaderItem item) {
        return list.indexOf(item);
    }

    public List getVector() {
        return list;
    }

    public void add(HeaderItem item) {
        if (item != null) {
            list.add(item);
        } else {
            System.out.println("item == null!!!");
        }
    }
    
    public HeaderItem remove(int index ) {
    	return (HeaderItem) list.remove(index);
    }

    public void replace(int index, HeaderItem item) {
        if ((index < list.size()) && (index >= 0)) {
            list.remove(index);
            list.add(index, item);
        }
    }

    public void uidRemove(Object uid) {
        for (int i = 0; i < count(); i++) {
            HeaderItem item = (HeaderItem) get(i);
            Object u = item.getUid();

            if (u.equals(uid)) {
                list.remove(i);

                break;
            }
        }
    }

    public HeaderItem uidGet(Object uid) {
        for (Iterator it = list.iterator(); it.hasNext();) {
            HeaderItem item = (HeaderItem) it.next();
            Object u = item.getUid();

            if (u.equals(uid)) {
                return item;
            }
        }

        return null;

        //	}
        //	for (int i = 0; i < count(); i++) {
        //		HeaderItem item = (HeaderItem) get(i);
        //		Object u = item.getUid();
        //		if (u.equals(uid)) {
        //			return item;
        //
        //		}
        //	}
        //
        //	return null;
    }

    public HeaderItem get(int index) {
        HeaderItem item = (HeaderItem) list.get(index);

        return item;
    }

    public int count() {
        return list.size();
    }

    public void clear() {
        list.clear();
    }
}