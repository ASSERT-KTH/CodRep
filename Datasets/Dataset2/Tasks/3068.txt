serverItem.set("enable_ssl", secureCheckBox.isSelected());

//The contents of this file are subject to the Mozilla Public License Version 1.1
//(the "License"); you may not use this file except in compliance with the 
//License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
//
//Software distributed under the License is distributed on an "AS IS" basis,
//WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
//for the specific language governing rights and
//limitations under the License.
//
//The Original Code is "The Columba Project"
//
//The Initial Developers of the Original Code are Frederik Dietz and Timo Stich.
//Portions created by Frederik Dietz and Timo Stich are Copyright (C) 2003. 
//
//All Rights Reserved.
package org.columba.mail.gui.config.account;

import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.BorderFactory;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import org.columba.core.config.DefaultItem;
import org.columba.core.gui.util.DefaultFormBuilder;
import org.columba.mail.config.AccountItem;
import org.columba.mail.config.MailConfig;
import org.columba.mail.util.MailResourceLoader;

import com.jgoodies.forms.layout.FormLayout;

/**
 *
 * @author  freddy
 * @version
 */
public class IncomingServerPanel
	extends DefaultPanel
	implements ActionListener {

	private JLabel loginLabel;
	private JTextField loginTextField;
	private JLabel passwordLabel;
	private JTextField passwordTextField;
	private JLabel hostLabel;
	private JTextField hostTextField;
	private JLabel portLabel;
	private JTextField portTextField;
	private JLabel typeLabel;
	private JComboBox typeComboBox;
	private JCheckBox storePasswordCheckBox;
	private JCheckBox secureCheckBox;

	private JLabel authenticationLabel;
	private JComboBox authenticationComboBox;

	private JLabel typeDescriptionLabel;

	private PopAttributPanel popPanel;
	private ImapAttributPanel imapPanel;

	private DefaultItem serverItem = null;

	private AccountItem accountItem;

	private JCheckBox defaultAccountCheckBox;

	private ReceiveOptionsPanel receiveOptionsPanel;
	//private ConfigFrame frame;

	private JDialog dialog;

	public IncomingServerPanel(
		JDialog dialog,
		AccountItem account,
		ReceiveOptionsPanel receiveOptionsPanel) {
		super();

		this.dialog = dialog;
		//super( frame, item );

		//this.frame = frame;
		this.accountItem = account;
		this.receiveOptionsPanel = receiveOptionsPanel;

		if (account.isPopAccount()) {
			serverItem = account.getPopItem();
		} else {
			serverItem = account.getImapItem();
		}

		initComponents();

		updateComponents(true);

	}

	public String getHost() {
		return hostTextField.getText();
	}

	public String getLogin() {
		return loginTextField.getText();
	}

	public boolean isPopAccount() {
		if (serverItem != null)
			return true;
		else
			return false;
	}

	protected void updateComponents(boolean b) {

		if (b) {
			loginTextField.setText(serverItem.get("user"));
			passwordTextField.setText(serverItem.get("password"));
			hostTextField.setText(serverItem.get("host"));
			portTextField.setText(serverItem.get("port"));

			storePasswordCheckBox.setSelected(
				serverItem.getBoolean("save_password"));

			defaultAccountCheckBox.setSelected(
				serverItem.getBoolean("use_default_account"));

			if (isPopAccount()) {

				authenticationComboBox.setSelectedItem(
					serverItem.get("login_method"));

			}

			secureCheckBox.setSelected(
				serverItem.getBoolean("enable_ssl", true));

			defaultAccountCheckBox.setEnabled(
				MailConfig.getAccountList().getDefaultAccountUid()
					== accountItem.getInteger("uid"));

			if (defaultAccountCheckBox.isEnabled()
				&& defaultAccountCheckBox.isSelected()) {
				showDefaultAccountWarning();
			} else {
				layoutComponents();
			}

		} else {
			serverItem.set("user", loginTextField.getText());
			serverItem.set("host", hostTextField.getText());
			serverItem.set("password", passwordTextField.getText());
			serverItem.set("port", portTextField.getText());

			serverItem.set("save_password", storePasswordCheckBox.isSelected());

			serverItem.set("enable_ssl", secureCheckBox.isEnabled());

			if (isPopAccount()) {
				serverItem.set(
					"login_method",
					(String) authenticationComboBox.getSelectedItem());
			}
			serverItem.set(
				"use_default_account",
				defaultAccountCheckBox.isSelected());

		}
	}

	protected void showDefaultAccountWarning() {

		setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

		GridBagLayout mainLayout = new GridBagLayout();
		GridBagConstraints mainConstraints = new GridBagConstraints();

		setLayout(mainLayout);

		mainConstraints.gridwidth = GridBagConstraints.REMAINDER;
		mainConstraints.anchor = GridBagConstraints.NORTHWEST;
		mainConstraints.weightx = 1.0;
		mainConstraints.insets = new Insets(0, 10, 5, 0);
		mainLayout.setConstraints(defaultAccountCheckBox, mainConstraints);
		add(defaultAccountCheckBox);

		mainConstraints = new GridBagConstraints();
		mainConstraints.weighty = 1.0;
		mainConstraints.gridwidth = GridBagConstraints.REMAINDER;
		/*
		mainConstraints.fill = GridBagConstraints.BOTH;
		mainConstraints.insets = new Insets(0, 0, 0, 0);
		mainConstraints.gridwidth = GridBagConstraints.REMAINDER;
		mainConstraints.weightx = 1.0;
		mainConstraints.weighty = 1.0;
		*/

		JLabel label =
			new JLabel(
				MailResourceLoader.getString(
					"dialog",
					"account",
					"using_default_account_settings"));
		Font newFont = label.getFont().deriveFont(Font.BOLD);
		label.setFont(newFont);
		mainLayout.setConstraints(label, mainConstraints);
		add(label);

	}

	protected void layoutComponents() {

		//		Create a FormLayout instance. 
		FormLayout layout =
			new FormLayout("10dlu, max(100;default), 3dlu, fill:max(150dlu;default):grow",
			// 2 columns
	""); // rows are added dynamically (no need to define them here)

		JPanel topPanel = new JPanel();

		// create a form builder
		DefaultFormBuilder builder = new DefaultFormBuilder(this, layout);
		

		// create EmptyBorder between components and dialog-frame 
		builder.setDefaultDialogBorder();

//		skip the first column
			 builder.setLeadingColumnOffset(1);

		// Add components to the panel:
		
		builder.append(defaultAccountCheckBox, 4);
		builder.nextLine();
		
			 
		builder.appendSeparator(
			MailResourceLoader.getString("dialog", "account", "configuration"));
		builder.nextLine();

		builder.append(loginLabel, 1);
		builder.append(loginTextField);
		builder.nextLine();

		builder.append(hostLabel, 1);
		builder.append(hostTextField);
		builder.nextLine();

		builder.append(portLabel, 1);
		builder.append(portTextField);
		builder.nextLine();

		builder.appendSeparator(
			MailResourceLoader.getString("dialog", "account", "security"));
		builder.nextLine();

		JPanel panel = new JPanel();
		FormLayout l =
					new FormLayout("max(100;default), 3dlu, left:max(50dlu;default)",
					// 2 columns
			""); // rows are added dynamically (no need to define them here)

				// create a form builder
				DefaultFormBuilder b = new DefaultFormBuilder(panel, l);
		b.append(authenticationLabel, authenticationComboBox);
		builder.append(panel, 3);
		builder.nextLine();

		builder.append(storePasswordCheckBox, 3);
		builder.nextLine();

		builder.append(secureCheckBox, 3);
		builder.nextLine();

		/*
		JPanel innerPanel = builder.getPanel();
		FormDebugUtils.dumpAll(innerPanel);
		setLayout(new BorderLayout());
		add(innerPanel, BorderLayout.CENTER);
		*/

		/*
		setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
		
		GridBagLayout mainLayout = new GridBagLayout();
		GridBagConstraints mainConstraints = new GridBagConstraints();
		
		mainConstraints.anchor = GridBagConstraints.NORTHWEST;
		mainConstraints.fill = GridBagConstraints.HORIZONTAL;
		mainConstraints.weightx = 1.0;
		
		setLayout(mainLayout);
		
		mainConstraints.gridwidth = GridBagConstraints.REMAINDER;
		mainConstraints.insets = new Insets(0, 10, 5, 0);
		mainLayout.setConstraints(defaultAccountCheckBox, mainConstraints);
		add(defaultAccountCheckBox);
		
		JPanel typePanel = new JPanel();
		Border b1 = BorderFactory.createEtchedBorder();
		Border b2 =
			BorderFactory.createTitledBorder(
				b1,
				MailResourceLoader.getString("dialog", "account", "type"));
		Border emptyBorder = BorderFactory.createEmptyBorder(5, 5, 5, 5);
		Border border = BorderFactory.createCompoundBorder(b2, emptyBorder);
		typePanel.setBorder(border);
		GridBagLayout layout = new GridBagLayout();
		GridBagConstraints c = new GridBagConstraints();
		typePanel.setLayout(layout);
		
		mainConstraints.gridwidth = GridBagConstraints.REMAINDER;
		mainConstraints.insets = new Insets(0, 0, 0, 0);
		mainLayout.setConstraints(typePanel, mainConstraints);
		add(typePanel);
		
		c.fill = GridBagConstraints.NONE;
		c.anchor = GridBagConstraints.WEST;
		c.weightx = 0.0;
		c.gridwidth = GridBagConstraints.RELATIVE;
		layout.setConstraints(typeLabel, c);
		typePanel.add(typeLabel);
		
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.weightx = 0.0;
		c.insets = new Insets(0, 5, 0, 0);
		layout.setConstraints(typeComboBox, c);
		typePanel.add(typeComboBox);
		
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.weightx = 0.0;
		c.insets = new Insets(0, 0, 0, 0);
		layout.setConstraints(typeDescriptionLabel, c);
		typePanel.add(typeDescriptionLabel);
		
		JPanel configPanel = new JPanel();
		b1 = BorderFactory.createEtchedBorder();
		b2 =
			BorderFactory.createTitledBorder(
				b1,
				MailResourceLoader.getString(
					"dialog",
					"account",
					"configuration"));
		emptyBorder = BorderFactory.createEmptyBorder(5, 5, 5, 5);
		border = BorderFactory.createCompoundBorder(b2, emptyBorder);
		configPanel.setBorder(border);
		layout = new GridBagLayout();
		c = new GridBagConstraints();
		configPanel.setLayout(layout);
		
		mainConstraints.gridwidth = GridBagConstraints.REMAINDER;
		mainConstraints.insets = new Insets(0, 0, 0, 0);
		mainLayout.setConstraints(configPanel, mainConstraints);
		add(configPanel);
		
		c.fill = GridBagConstraints.HORIZONTAL;
		c.anchor = GridBagConstraints.NORTHWEST;
		c.weightx = 0.1;
		c.gridwidth = GridBagConstraints.RELATIVE;
		layout.setConstraints(loginLabel, c);
		configPanel.add(loginLabel);
		
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.weightx = 0.9;
		layout.setConstraints(loginTextField, c);
		configPanel.add(loginTextField);
		
		c.gridwidth = GridBagConstraints.RELATIVE;
		c.weightx = 0.1;
		layout.setConstraints(hostLabel, c);
		configPanel.add(hostLabel);
		
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.weightx = 0.9;
		layout.setConstraints(hostTextField, c);
		configPanel.add(hostTextField);
		
		c.gridwidth = GridBagConstraints.RELATIVE;
		c.weightx = 0.1;
		layout.setConstraints(portLabel, c);
		configPanel.add(portLabel);
		
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.weightx = 0.9;
		layout.setConstraints(portTextField, c);
		configPanel.add(portTextField);
		
		JPanel securityPanel = new JPanel();
		b1 = BorderFactory.createEtchedBorder();
		b2 =
			BorderFactory.createTitledBorder(
				b1,
				MailResourceLoader.getString("dialog", "account", "security"));
		
		emptyBorder = BorderFactory.createEmptyBorder(5, 5, 5, 5);
		border = BorderFactory.createCompoundBorder(b2, emptyBorder);
		securityPanel.setBorder(border);
		
		mainConstraints.gridwidth = GridBagConstraints.REMAINDER;
		mainLayout.setConstraints(securityPanel, mainConstraints);
		add(securityPanel);
		
		layout = new GridBagLayout();
		c = new GridBagConstraints();
		securityPanel.setLayout(layout);
		
		c.fill = GridBagConstraints.HORIZONTAL;
		c.anchor = GridBagConstraints.WEST;
		c.gridwidth = GridBagConstraints.RELATIVE;
		c.weightx = 0.0;
		layout.setConstraints(authenticationLabel, c);
		securityPanel.add(authenticationLabel);
		
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.fill = GridBagConstraints.NONE;
		c.weightx = 1.0;
		c.insets = new Insets(0, 5, 0, 0);
		layout.setConstraints(authenticationComboBox, c);
		securityPanel.add(authenticationComboBox);
		
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.insets = new Insets(0, 0, 0, 0);
		layout.setConstraints(storePasswordCheckBox, c);
		securityPanel.add(storePasswordCheckBox);
		
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.weightx = 1.0;
		layout.setConstraints(secureCheckBox, c);
		securityPanel.add(secureCheckBox);
		
		mainConstraints.gridheight = GridBagConstraints.REMAINDER;
		mainConstraints.weighty = 1.0;
		mainConstraints.fill = GridBagConstraints.VERTICAL;
		Component vglue = Box.createVerticalGlue();
		mainLayout.setConstraints(vglue, mainConstraints);
		add(vglue);
		*/
	}

	protected void initComponents() {

		defaultAccountCheckBox =
			new JCheckBox(
				MailResourceLoader.getString(
					"dialog",
					"account",
					"use_default_account_settings"));
		defaultAccountCheckBox.setMnemonic(
			MailResourceLoader.getMnemonic(
				"dialog",
				"account",
				"use_default_account_settings"));
		defaultAccountCheckBox.setActionCommand("DEFAULT_ACCOUNT");
		defaultAccountCheckBox.addActionListener(this);

		//defaultAccountCheckBox.setEnabled(false);
		typeLabel =
			new JLabel(
				MailResourceLoader.getString(
					"dialog",
					"account",
					"server_type"));
		typeLabel.setDisplayedMnemonic(
			MailResourceLoader.getMnemonic("dialog", "account", "server_type"));
		typeComboBox = new JComboBox();
		typeComboBox.addItem("POP3");
		typeComboBox.addItem("IMAP4");
		if (accountItem.isPopAccount())
			typeComboBox.setSelectedIndex(0);
		else
			typeComboBox.setSelectedIndex(1);

		typeLabel.setLabelFor(typeComboBox);
		typeComboBox.setEnabled(false);

		typeDescriptionLabel =
			new JLabel("Description: To connect to and fetch new messages from a POP3-server.");
		typeDescriptionLabel.setEnabled(false);

		loginLabel = new JLabel();
		loginLabel.setText(
			MailResourceLoader.getString("dialog", "account", "login"));
		loginLabel.setDisplayedMnemonic(
			MailResourceLoader.getMnemonic("dialog", "account", "login"));
		//$NON-NLS-1$
		loginTextField = new JTextField();
		loginLabel.setLabelFor(loginTextField);
		passwordLabel = new JLabel();
		passwordLabel.setText(
			MailResourceLoader.getString("dialog", "account", "password"));
		//$NON-NLS-1$
		passwordTextField = new JTextField();

		hostLabel = new JLabel();
		hostLabel.setText(
			MailResourceLoader.getString("dialog", "account", "host"));
		hostLabel.setDisplayedMnemonic(
			MailResourceLoader.getMnemonic("dialog", "account", "host"));
		//$NON-NLS-1$

		hostTextField = new JTextField();
		hostLabel.setLabelFor(hostTextField);

		portLabel = new JLabel();
		portLabel.setText(
			MailResourceLoader.getString("dialog", "account", "port"));
		portLabel.setDisplayedMnemonic(
			MailResourceLoader.getMnemonic("dialog", "account", "port"));
		//$NON-NLS-1$
		portTextField = new JTextField();
		portLabel.setLabelFor(portTextField);

		storePasswordCheckBox = new JCheckBox();
		storePasswordCheckBox.setText(
			MailResourceLoader.getString(
				"dialog",
				"account",
				"store_password_in_configuration_file"));
		storePasswordCheckBox.setMnemonic(
			MailResourceLoader.getMnemonic(
				"dialog",
				"account",
				"store_password_in_configuration_file"));

		secureCheckBox = new JCheckBox();
		secureCheckBox.setText(
			MailResourceLoader.getString(
				"dialog",
				"account",
				"use_SSL_for_secure_connection"));
		secureCheckBox.setMnemonic(
			MailResourceLoader.getMnemonic(
				"dialog",
				"account",
				"use_SSL_for_secure_connection"));
		authenticationLabel =
			new JLabel(
				MailResourceLoader.getString(
					"dialog",
					"account",
					"authentication_type"));
		authenticationLabel.setDisplayedMnemonic(
			MailResourceLoader.getMnemonic(
				"dialog",
				"account",
				"authentication_type"));

		authenticationComboBox = new JComboBox();
		authenticationLabel.setLabelFor(authenticationComboBox);
		if (accountItem.isPopAccount()) {
			authenticationComboBox.addItem("USER");
			authenticationComboBox.addItem("APOP");
		} else {
			authenticationComboBox.addItem("LOGIN");

		}

	}

	public void actionPerformed(ActionEvent e) {
		String action = e.getActionCommand();

		if (action.equals("SERVER")) //$NON-NLS-1$
			{
			System.out.println("selection changed");

		} else if (action.equals("DEFAULT_ACCOUNT")) {
			removeAll();
			receiveOptionsPanel.removeAll();

			if (defaultAccountCheckBox.isSelected()) {
				showDefaultAccountWarning();
				receiveOptionsPanel.showDefaultAccountWarning();
			} else {
				layoutComponents();
				receiveOptionsPanel.layoutComponents();
			}

			revalidate();
			receiveOptionsPanel.revalidate();
		}

	}

	public boolean isFinished() {
		boolean result = false;

		String host = getHost();
		String login = getLogin();

		if (host.length() == 0) {
			JOptionPane.showMessageDialog(
				null,
				MailResourceLoader.getString(
					"dialog",
					"account",
					"You_have_to_enter_a_host_name"));
			//$NON-NLS-1$
		} else if (login.length() == 0) {
			JOptionPane.showMessageDialog(
				null,
				MailResourceLoader.getString(
					"dialog",
					"account",
					"You_have_to_enter_a_login_name"));
			//$NON-NLS-1$

		} else {

			result = true;
		}

		return result;
	}

}
 No newline at end of file