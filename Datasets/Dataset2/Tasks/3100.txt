import org.columba.core.main.MainInterface;

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

package org.columba.mail.gui.table.util;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.Timer;

import org.columba.mail.command.FolderCommandReference;
import org.columba.mail.folder.Folder;
import org.columba.mail.folder.command.MarkMessageCommand;
import org.columba.mail.gui.table.TableController;
import org.columba.main.MainInterface;
/**
 * Title:
 * Description:
 * Copyright:    Copyright (c) 2001
 * Company:
 * @author
 * @version 1.0
 */

public class MarkAsReadTimer implements ActionListener {
	private Timer timer;

	private final static int ONE_SECOND = 1000;

	private int value;
	private int maxValue;

	private Folder folder;
	private Object[] uids;

	private TableController tableController;

	public MarkAsReadTimer(TableController tableController) {

		this.tableController = tableController;

		// FIXME
		this.maxValue = 2;
		/*
		this.maxValue =
			Config.getOptionsConfig().getIntegerGuiOptions(
				"markasreaddelay",
				2);
		*/
		timer = new Timer(ONE_SECOND * maxValue, this);

	}

	public void setMaxValue(int i) {
		maxValue = i;
	}

	public synchronized void stopTimer() {
		value = 0;

		System.out.println("timer stopped--------->");

		timer.stop();
	}

	public synchronized void restart(Folder f, Object uid) {
		folder = f;
		uids = new Object[1];
		uids[0] = uid;

		System.out.println("timer started--------->");

		value = 0;
		timer.restart();
	}

	public void actionPerformed(ActionEvent e) {

		timer.stop();

		FolderCommandReference[] r =
			(FolderCommandReference[]) tableController
				.getTableSelectionManager()
				.getSelection();
		r[0].setMarkVariant(MarkMessageCommand.MARK_AS_READ);

		MarkMessageCommand c = new MarkMessageCommand(r);

		MainInterface.processor.addOp(c);

		value++;
	}
}
 No newline at end of file