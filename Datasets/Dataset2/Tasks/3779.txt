static boolean WITH_TEXT = false;

//The contents of this file are subject to the Mozilla Public License Version 1.1
//(the "License"); you may not use this file except in compliance with the 
//License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
//
//Software distributed under the License is distributed on an "AS IS" basis,
//WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
//for the specific language governing rights and
//limitations under the License.
//
//The Original Code is "The Columba Project"
//
//The Initial Developers of the Original Code are Frederik Dietz and Timo Stich.
//Portions created by Frederik Dietz and Timo Stich are Copyright (C) 2003. 
//
//All Rights Reserved.
package org.columba.core.gui.util;

import java.awt.Insets;

import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.SwingConstants;

import org.columba.core.action.BasicAction;
import org.columba.core.config.Config;
import org.columba.core.config.GuiItem;

public class ToolbarButton extends JButton {
	String buttonText;

	static boolean WITH_ICON = true;
	static boolean WITH_TEXT = true;
	static boolean ALIGNMENT = true;

	public ToolbarButton()
	{
		
		super();
		setRequestFocusEnabled(false);
	}
	
	public ToolbarButton(Icon icon)
	{
		super(icon);
		setRequestFocusEnabled(false);
	}
	
	public ToolbarButton(BasicAction a) {
		super(a);

		setRequestFocusEnabled(false);
		setMargin(new Insets(1, 1, 1, 1));

		GuiItem item = Config.getOptionsConfig().getGuiItem();
		/*
		WindowItem item =
			MailConfig.getMainFrameOptionsConfig().getWindowItem();
		*/
		
		if (item.getBoolean("toolbar","enable_icon") == true)
			WITH_ICON = true;
		else
			WITH_ICON = false;

		if (item.getBoolean("toolbar","enable_text") == true)
			WITH_TEXT = true;
		else
			WITH_TEXT = false;

		if (item.getBoolean("toolbar","text_position") == true)
			ALIGNMENT = true;
		else
			ALIGNMENT = false;

		if ((WITH_ICON == true)
			&& (WITH_TEXT == true)
			&& (ALIGNMENT == true)) {

			setVerticalTextPosition(SwingConstants.BOTTOM);
			setHorizontalTextPosition(SwingConstants.CENTER);
			setIcon(a.getLargeIcon());

			setText(a.getToolbarName());

		} else if (
			(WITH_ICON == true)
				&& (WITH_TEXT == true)
				&& (ALIGNMENT == false)) {
			setVerticalTextPosition(SwingConstants.CENTER);
			setHorizontalTextPosition(SwingConstants.RIGHT);
			setIcon(a.getLargeIcon());

			setText(a.getName());

		} else if ((WITH_ICON == true) && (WITH_TEXT == false)) {

			setIcon(a.getLargeIcon());
			setText(null);

		} else if ((WITH_ICON == false) && (WITH_TEXT == true)) {

			setIcon(null);
			setText(a.getName());

		}
	}

	public boolean isFocusTraversable() {
		return isRequestFocusEnabled();
	}

}
 No newline at end of file