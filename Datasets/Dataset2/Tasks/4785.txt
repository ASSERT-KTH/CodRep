Main.DEBUG = debugValue.booleanValue();

// The contents of this file are subject to the Mozilla Public License Version
// 1.1
//(the "License"); you may not use this file except in compliance with the
//License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
//
//Software distributed under the License is distributed on an "AS IS" basis,
//WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
//for the specific language governing rights and
//limitations under the License.
//
//The Original Code is "The Columba Project"
//
//The Initial Developers of the Original Code are Frederik Dietz and Timo
// Stich.
//Portions created by Frederik Dietz and Timo Stich are Copyright (C) 2003.
//
//All Rights Reserved.
package org.columba.core.main;

import jargs.gnu.CmdLineParser;

import org.columba.core.util.GlobalResourceLoader;

/**
 * Parsing the commandline arguments and setting states, that can be used from
 * other components.
 * 
 * @author waffel
 */
public class ColumbaCmdLineParser {

	private static final String RESOURCE_PATH = "org.columba.core.i18n.global";
	
	private static CmdLineParser parser;

	private static CmdLineParser.Option help;

	private static CmdLineParser.Option version;

	private static CmdLineParser.Option debug;

	private static CmdLineParser.Option path;

	static {
		parser = new CmdLineParser();

		// setting any options
		// the short option '+' is an hack until jargs supports also "only long
		// commands"
		// TODO (@author waffel): make options i18n compatible
		help = parser.addBooleanOption('+', "help");
		version = parser.addBooleanOption('+', "version");
		debug = parser.addBooleanOption('d', "debug");

		path = parser.addStringOption('p', "path");

	}

	protected String pathOption;

	public ColumbaCmdLineParser() {
	}

	/**
	 * Parsing the commandline arguments and set the given values to the
	 * commandline arguments.
	 * 
	 * @param args
	 *            commandline arguments to be parsed
	 */
	public void parseCmdLine(String[] args) throws IllegalArgumentException {
		try {
			parser.parse(args);
		} catch (CmdLineParser.OptionException e) {
			throw new IllegalArgumentException(e.getMessage());
		}

		checkHelp();
		checkVersion();
		checkDebug();
		checkPath();

	}

	/**
	 * Check the commandLineArgument help. If the argument help is given, then a
	 * help text is printed to standard out and the program exists.
	 * 
	 * @param helpOpt
	 *            help Option
	 * @see CmdLineParser.Option
	 * @param parser
	 *            parser which parsed the option
	 */
	private void checkHelp() {
		Boolean helpValue = (Boolean) parser.getOptionValue(help);

		if (helpValue != null) {
			if (helpValue.booleanValue()) {
				printUsage();
			}
		}
	}

	/**
	 * Check if the commandline argument --version is given. If this is true the
	 * version text is printed out to stdandard out and the program exit.
	 * 
	 * @param versionOpt
	 *            Verion Option
	 * @see CmdLineParser.Option
	 * @param parser
	 *            parser which parsed the option
	 */
	private void checkVersion() {
		Boolean versionValue = (Boolean) parser.getOptionValue(version);

		if (versionValue != null) {
			if (versionValue.booleanValue()) {
				printVersionInfo();
			}
		}
	}

	/**
	 * Checks if the commandline argument -d,--debug is given, if this is true
	 * the intern debugValue is set to true
	 * 
	 * @see ColumbaCmdLineParser#setDebugOption(boolean) else the option is set
	 *      to false. You can get the option via
	 * @see ColumbaCmdLineParser#isDebugOption()
	 * @param debugOpt
	 *            Option for debug
	 * @see CmdLineParser.Option
	 * @param parser
	 *            parser which parsed the option
	 */
	private void checkDebug() {
		Boolean debugValue = (Boolean) parser.getOptionValue(debug);

		if (debugValue != null) {
			MainInterface.DEBUG = debugValue.booleanValue();
		}
	}

	/**
	 * Checks if the commandline option -p,--path is given, if this is true a
	 * new ConfigPath with the path to the configs is generated, else a empty
	 * (default) ConfigPath Object is created
	 * 
	 * @param pathOpt
	 *            the path option
	 * @see CmdLineParser.Option
	 * @param parser
	 *            parser which parsed the Option
	 */
	private void checkPath() {
		String pathValue = (String) parser.getOptionValue(path);
		setPathOption(pathValue);
	}

	/**
	 * Returns the path to the configuration Columba should use.
	 */
	public String getPathOption() {
		return pathOption;
	}

	/**
	 * Sets the path to the configuration Columba should use.
	 */
	public void setPathOption(String string) {
		pathOption = string;
	}
	
	/**
	 * prints the usage of the program with commandline arguments.
	 * 
	 * TODO (@author waffel): all options should be printed
	 */
	public static void printUsage() {
		System.out.println(GlobalResourceLoader.getString(RESOURCE_PATH,
				"global", "cmdline_usage"));
		System.out.println();
		System.out.println(GlobalResourceLoader.getString(RESOURCE_PATH,
				"global", "cmdline_shortinfo"));
		System.out.println(GlobalResourceLoader.getString(RESOURCE_PATH,
				"global", "cmdline_debugopt"));
		System.out.println(GlobalResourceLoader.getString(RESOURCE_PATH,
				"global", "cmdline_pathopt"));

		System.out.println();
		
		org.columba.mail.main.ColumbaCmdLineParser.printUsage();
		
		System.out.println();

		System.out.println(GlobalResourceLoader.getString(RESOURCE_PATH,
				"global", "cmdline_helpopt"));
		
		System.out.println();
		
		System.exit(1);
	}

	/**
	 * Prints the current version of columba
	 */
	public static void printVersionInfo() {
		System.out.println("Columba " + VersionInfo.getVersion());
		
		System.exit(1);
	}

}
 No newline at end of file