import org.columba.core.main.MainInterface;

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

package org.columba.mail.gui.composer;

import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.Enumeration;
import java.util.Vector;

import org.columba.addressbook.AddressBookIC;
import org.columba.addressbook.folder.HeaderItem;
import org.columba.addressbook.folder.HeaderItemList;
import org.columba.addressbook.parser.AddressParser;
import org.columba.addressbook.parser.ListParser;
import org.columba.core.config.WindowItem;
import org.columba.core.util.CharsetEvent;
import org.columba.core.util.CharsetListener;
import org.columba.core.util.CharsetManager;
import org.columba.mail.composer.MessageComposer;
import org.columba.mail.config.MailConfig;
import org.columba.mail.gui.composer.action.ComposerActionListener;
import org.columba.mail.gui.composer.util.IdentityInfoPanel;
import org.columba.mail.util.AddressCollector;
import org.columba.main.MainInterface;

/**
 * @author frd
 *
 * controller for message composer dialog
 */
public class ComposerController
	implements CharsetListener, ComponentListener, WindowListener {

	public ComposerInterface composerInterface;
	
	ComposerView view;
	ComposerModel model;

	public ComposerController() {
		composerInterface = new ComposerInterface();
		composerInterface.composerController = this;
		

		composerInterface.composerActionListener =
			new ComposerActionListener(composerInterface);

		composerInterface.viewItem = MailConfig.getComposerOptionsConfig().getViewItem();
		
		
		model = new ComposerModel(composerInterface);

		composerInterface.identityInfoPanel = new IdentityInfoPanel();
		composerInterface.attachmentController =
			new AttachmentController(model);
		composerInterface.subjectController = new SubjectController(model);
		composerInterface.priorityController = new PriorityController(model);
		composerInterface.accountController = new AccountController(composerInterface,model);
		composerInterface.editorController = new EditorController(model);
		composerInterface.headerController = new HeaderController(model);

		composerInterface.messageComposer = new MessageComposer(this);

		//composerInterface.composerFolder = new TempFolder();

		composerInterface.charsetManager = new CharsetManager();
		composerInterface.charsetManager.addCharsetListener(this);

		view = new ComposerView(composerInterface);

		composerInterface.composerFrame = view;

		composerInterface.composerSpellCheck =
			new ComposerSpellCheck(composerInterface);

		/*
		composerInterface.addressbookFrame =
			AddressBookIC.createAddressbookListFrame(composerInterface);

		composerInterface.addressbookFrame.addComponentListener(this);
		*/
		
		composerInterface.composerFrame.addComponentListener(this);

		//view.setVisible(true);	

		registerWindowListener();

		int count = MailConfig.getAccountList().count();
		if ( count != 0 ) loadWindowPosition();
	}

	public void charsetChanged(CharsetEvent e) {
		model.setCharsetName(e.getValue());
	}

	public boolean checkState() {
		// update ComposerModel based on user-changes in ComposerView
		updateComponents(false);

		boolean b = composerInterface.subjectController.checkState();
		if (b == false)
			return false;

		b = composerInterface.headerController.checkState();
		if (b == false)
			return false;

		return true;
	}

	public void saveWindowPosition() {

		java.awt.Dimension d = view.getSize();

		WindowItem windowItem = composerInterface.viewItem.getWindowItem();
		
		windowItem.set("x", 0);
		windowItem.set("y", 0);
		windowItem.set("width", d.width);
		windowItem.set("height", d.height);

		composerInterface.viewItem.set("splitpanes","main",
			view.getMainDividerLocation());
		composerInterface.viewItem.set("splitpanes","header",
			view.getRightDividerLocation());

	}

	public void loadWindowPosition() {
		WindowItem windowItem = composerInterface.viewItem.getWindowItem();
		
		java.awt.Point point = windowItem.getPoint();
		java.awt.Dimension dim = windowItem.getDimension();

		view.setSize(dim);

		view.setMainDividerLocation(
			composerInterface.viewItem.getInteger("splitpanes","main"));
		view.setRightDividerLocation(
		composerInterface.viewItem.getInteger("splitpanes","header"));
	}

	protected void registerWindowListener() {
		view.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				saveWindowPosition();
				hideComposerWindow();
			}
		});

	}

	public ComposerModel getModel() {
		return model;
	}

	public void updateComponents(boolean b) {
		composerInterface.subjectController.updateComponents(b);

		composerInterface.editorController.updateComponents(b);
		composerInterface.priorityController.updateComponents(b);
		composerInterface.accountController.updateComponents(b);
		composerInterface.attachmentController.updateComponents(b);

		composerInterface.headerController.updateComponents(b);

	}

	public void showComposerWindow() {

		updateComponents(true);

		composerInterface.editorController.installListener();
		composerInterface.subjectController.installListener();
		composerInterface.priorityController.installListener();
		//composerInterface.accountController.installListener();
		composerInterface.attachmentController.installListener();

		//composerInterface.headerController.installListener();

		composerInterface.headerController.view.getTable().initFocus(
			composerInterface.subjectController.view);
			
		if (composerInterface.viewItem.getBoolean("addressbook","enabled") == true )
			showAddressbookWindow();

		view.setVisible(true);

		/*
		initAddressCompletion();
		*/
		
		composerInterface.headerController.appendRow();
	}

	protected void initAddressCompletion() {
		AddressCollector.clear();
		
		HeaderItemList list = MainInterface.addressbookInterface.tree.getFolder(101).getHeaderItemList();
		
		for ( int i=0; i<list.count(); i++ )
		{
			HeaderItem item = list.get(i);
			
			if ( item.contains("displayname") ) AddressCollector.addAddress( (String) item.get("displayname"), item ); //$NON-NLS-1$ //$NON-NLS-2$
			if ( item.contains("email;internet") ) AddressCollector.addAddress( (String) item.get("email;internet"), item ); //$NON-NLS-1$ //$NON-NLS-2$
		}
		
		list = MainInterface.addressbookInterface.tree.getFolder(102).getHeaderItemList();
		
		for ( int i=0; i<list.count(); i++ )
		{
			HeaderItem item = list.get(i);
			
			if ( item.contains("displayname") ) AddressCollector.addAddress( (String) item.get("displayname"), item ); //$NON-NLS-1$ //$NON-NLS-2$
			if ( item.contains("email;internet") ) AddressCollector.addAddress( (String) item.get("email;internet"), item ); //$NON-NLS-1$ //$NON-NLS-2$
		}
	}

	public void hideComposerWindow() {

		if (composerInterface.viewItem.getBoolean("addressbook","enabled") == true)
			hideAddressbookWindow();

		view.setVisible(false);
	}

	public void showAddressbookWindow() {
		updateAddressbookFrame();

		composerInterface.addressbookFrame.setVisible(true);
	}

	public void hideAddressbookWindow() {
		composerInterface.addressbookFrame.setVisible(false);
	}

	public Vector getRCPTVector() {
		Vector output = new Vector();
		Enumeration aktEnum;
		Object aktAdress;

		Vector v = ListParser.parseVector(getModel().getToList());
		output.addAll(AddressParser.normalizeRCPTVector(v));
		v = ListParser.parseVector(getModel().getCcList());
		output.addAll(AddressParser.normalizeRCPTVector(v));
		v = ListParser.parseVector(getModel().getBccList());
		output.addAll(AddressParser.normalizeRCPTVector(v));

		
		return output;
	}

	public void componentHidden(ComponentEvent e) {
	}

	public void componentMoved(ComponentEvent e) {
		/*
		if (composerInterface.addressbookFrame.isVisible()) {
			updateAddressbookFrame();
		}
		*/
	}

	protected void updateAddressbookFrame() {

		if ((view.getLocation().x
			- composerInterface.addressbookFrame.getSize().width
			< 0)
			|| (view.getLocation().y < 0)) {
			int x =
				view.getLocation().x
					- composerInterface.addressbookFrame.getSize().width;
			int y = view.getLocation().y;

			if (x <= 0)
				x = 0;
			if (y <= 0)
				y = 0;

			view.setLocation(
				x + composerInterface.addressbookFrame.getSize().width,
				y);

		}

		composerInterface.addressbookFrame.setLocation(
			view.getLocation().x
				- composerInterface.addressbookFrame.getSize().width,
			view.getLocation().y);

	}

	public void componentResized(ComponentEvent e) {
	}

	public void componentShown(ComponentEvent e) {
	}

	public void windowIconified(WindowEvent e) {
	}

	public void windowActivated(WindowEvent e) {
	}

	public void windowClosed(WindowEvent e) {
	}

	public void windowClosing(WindowEvent e) {
	}

	public void windowDeactivated(WindowEvent e) {
	}

	public void windowDeiconified(WindowEvent e) {
	}

	public void windowOpened(WindowEvent e) {
	}

}
 No newline at end of file