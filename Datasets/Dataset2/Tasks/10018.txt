extends BaseIssue

package org.tigris.scarab.om;

// JDK classes
import java.util.*;

// Turbine classes
import org.apache.turbine.om.*;
import org.apache.turbine.om.peer.BasePeer;
import org.apache.turbine.util.db.Criteria;
import org.apache.turbine.util.ObjectUtils;
import org.apache.turbine.util.StringUtils;
import org.apache.turbine.util.RunData;
import org.apache.turbine.util.ParameterParser;
import org.apache.turbine.util.Log;
import org.apache.turbine.util.db.pool.DBConnection;

/** 
  * The skeleton for this class was autogenerated by Torque on:
  *
  * [Wed Feb 28 16:36:26 PST 2001]
  *
  * You should add additional methods to this class to meet the
  * application requirements.  This class will only be generated as
  * long as it does not already exist in the output directory.

  */
public class Issue 
    extends ZZBaseIssue
    implements Persistent
{

    /**
     * Should contain AttValues for the Issue as well as empty AttValues
     * that are relevant for the module, but have not been set for
     * the issue.
     */
    public HashMap getModuleAttributes() throws Exception
    {
        return null;
    }


    public HashMap getAttributeValuesMap() throws Exception
    {
        Criteria crit = new Criteria(2)
            .add(AttributeValuePeer.DELETED, false);        
        Vector siaValues = getAttributeValues(crit);

        HashMap map = new HashMap( (int)(1.25*siaValues.size() + 1) );
        for ( int i=0; i<siaValues.size(); i++ ) 
        {
            AttributeValue att = (AttributeValue) siaValues.get(i);
            String name = att.getAttribute().getName();
            map.put(name.toUpperCase(), att);
        }

        return map;
    }

    public HashMap getAllAttributeValuesMap() throws Exception
    {
        Criteria crit = new Criteria(2)
            .add(RModuleAttributePeer.DELETED, false);        
        Vector moduleAttributes = 
            getModule().getRModuleAttributes(crit);
        HashMap siaValuesMap = getAttributeValuesMap();

        HashMap map = new HashMap( (int)(1.25*moduleAttributes.size() + 1) );

        for ( int i=0; i<moduleAttributes.size(); i++ ) 
        {
            Attribute att = 
               ((RModuleAttribute) moduleAttributes.get(i)).getAttribute();
            String key = att.getName().toUpperCase();

            if ( siaValuesMap.containsKey(key) ) 
            {
                map.put( key, siaValuesMap.get(key) );
            }
            else 
            {
                map.put( key, AttributeValue.getNewInstance(att, this) ); 
            }             
        }
        return map;
    }

    /**
        calls the doPopulate() method with validation false
    */
    public Issue doPopulate(RunData data)
        throws Exception
    {
        return doPopulate(data, false);
    }

    /**
        populates project based on the existing project data from POST
    */
    public Issue doPopulate(RunData data, boolean validate)
        throws Exception
    {
        String prefix = ""; //getQueryKey().toLowerCase();

        if ( isNew() ) 
        {
            String project_id = 
                data.getParameters().getString(prefix + "id"); 
            if (validate)
            {
                if (project_id == null)
                    throw new Exception ( "Missing project_id!" );
            }
            setPrimaryKey(new NumberKey(project_id));
            setCreatedBy( (NumberKey)
                          ((ScarabUser)data.getUser()).getPrimaryKey() );
            setCreatedDate( new Date() );
        }

        if (validate)
        {
        }

        return this;
    }

}


