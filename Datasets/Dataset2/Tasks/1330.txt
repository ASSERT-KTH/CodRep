IFolder f = folderFacade.getFolderByName(s);

// The contents of this file are subject to the Mozilla Public License Version
// 1.1
//(the "License"); you may not use this file except in compliance with the
//License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
//
//Software distributed under the License is distributed on an "AS IS" basis,
//WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
//for the specific language governing rights and
//limitations under the License.
//
//The Original Code is "The Columba Project"
//
//The Initial Developers of the Original Code are Frederik Dietz and Timo
// Stich.
//Portions created by Frederik Dietz and Timo Stich are Copyright (C) 2003.
//
//All Rights Reserved.
package org.columba.mail.parser;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;

import org.columba.addressbook.facade.IFolderFacade;
import org.columba.addressbook.folder.IContactStorage;
import org.columba.addressbook.folder.IFolder;
import org.columba.addressbook.folder.IGroupFolder;
import org.columba.addressbook.model.IContactItem;
import org.columba.addressbook.model.IContactItemMap;
import org.columba.addressbook.model.IContactModel;
import org.columba.addressbook.model.IEmailModel;
import org.columba.addressbook.model.IHeaderItem;
import org.columba.addressbook.model.IHeaderItemList;
import org.columba.api.exception.ServiceNotFoundException;
import org.columba.core.logging.Logging;
import org.columba.mail.connector.ServiceConnector;

/**
 * Provides methods for creating new lists from other list formats.
 * 
 * @author fdietz
 */
public class ListBuilder {

	/**
	 * Flatten mixed list containing contacts and groups to a new list
	 * containing only contacts.
	 * 
	 * @param list
	 *            mixed list
	 * @return list containing only contacts
	 */
	public static List createFlatList(List list) {
		IFolderFacade folderFacade;
		try {
			folderFacade = ServiceConnector.getFolderFacade();
		} catch (ServiceNotFoundException e1) {

			e1.printStackTrace();
			return new ArrayList();
		}

		if (list == null)
			return null;

		List result = new Vector();

		for (Iterator it = list.iterator(); it.hasNext();) {
			String s = (String) it.next();
			IFolder f = folderFacade.getFolder(s);

			// if its a group item
			if (f != null) {
				IContactItemMap map = null;
				try {
					map = ((IGroupFolder) f).getContactItemMap();
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (map == null)
					continue;

				Iterator it2 = map.iterator();
				while (it2.hasNext()) {
					IContactItem i = (IContactItem) it2.next();
					String address = i.getAddress();

					if (address == null) {
						continue;
					}

					result.add(address);
				}
			} else {
				// contact item

				// -> check if its a contact displayname
				// -> if so, retrieve email address from contact folder

				// look into both folders
				IContactStorage personal = (IContactStorage) folderFacade
						.getLocalAddressbook();
				IContactStorage collected = (IContactStorage) folderFacade
						.getCollectedAddresses();

				// try to find a matching contact item
				IContactModel item = null;
				try {

					Object uid = personal.exists(s);
					if (uid != null) {
						item = personal.get(uid);
					}

					uid = collected.exists(s);
					if (uid != null)
						item = collected.get(uid);

				} catch (Exception e) {
					if (Logging.DEBUG)
						e.printStackTrace();
				}

				// if match found
				if (item != null) {
					// simply get the first address
					// TODO: use preferred one
					Iterator it2 = item.getEmailIterator(); 
					if ( it2.hasNext() )
						result.add( ((IEmailModel)it2.next()).getAddress());
				}
				else
					result.add(s);
			}

		}

		return result;
	}

	/**
	 * Create list containing only strings from a HeaderItemList containing
	 * HeaderItem objects.
	 * 
	 * @param list
	 *            HeaderItemList containing HeaderItem objects
	 * @return list containing only strings
	 */
	public static List createStringListFromItemList(IHeaderItemList list) {
		List result = new Vector();

		for (Iterator it = list.iterator(); it.hasNext();) {
			IHeaderItem item = (IHeaderItem) it.next();

			if (item == null) {
				continue;
			}

			result.add(item.getDisplayName());
		}

		return result;
	}

}
 No newline at end of file