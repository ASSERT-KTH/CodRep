//System.out.println("not selected state");

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

package org.columba.mail.gui.composer.util;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Vector;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JTextField;

import org.columba.addressbook.folder.HeaderItem;
import org.columba.mail.util.AddressCollector;

/**
 *  This code is adapted from http://www.algonet.se/~set_lo/java/sbe/files/uts2/Chapter9html/Chapter9.htm
 */

public class AutoCompleter implements KeyListener, ItemListener {
	private JComboBox _comboBox = null;
	private JTextField _editor = null;
	private AddressbookTableView _table = null;

	int cursor_pos = -1;

	private Object[] _options;

	public AutoCompleter(JComboBox comboBox, Object[] options) {
		_comboBox = comboBox;

		_editor = (JTextField) comboBox.getEditor().getEditorComponent();
		_editor.addKeyListener(this);

		_options = options;
		_comboBox.addItemListener(this);
	}

	public AutoCompleter(
		JComboBox comboBox,
		AddressbookTableView table,
		Object[] options) {
		_comboBox = comboBox;

		_table = table;
		_editor = (JTextField) comboBox.getEditor().getEditorComponent();
		_editor.addKeyListener(this);
		_options = options;

		_comboBox.addItemListener(this);
	}

	public AutoCompleter(JTextField tf, Object[] options) {

		_editor = tf;
		_editor.addKeyListener(this);
		_options = options;
	}

	public void keyTyped(KeyEvent e) {
		char ch = e.getKeyChar();

	}

	public void keyPressed(KeyEvent e) {
		char ch = e.getKeyChar();

	}

	public void keyReleased(KeyEvent e) {

		char ch = e.getKeyChar();

		if (ch == KeyEvent.CHAR_UNDEFINED
			|| Character.isISOControl(ch)
			|| ch == KeyEvent.VK_DELETE
			)
			return;

		int pos = _editor.getCaretPosition();
		cursor_pos = _editor.getCaretPosition();
		String str = _editor.getText();
		if (str.length() == 0)
			return;

		autoComplete(str, pos);

	}

	private void autoComplete(String strf, int pos) {

		Object[] opts = getMatchingOptions(strf.substring(0, pos));
		if (_comboBox != null) {
			_comboBox.setModel(new DefaultComboBoxModel(opts));
		}
		if (opts.length > 0) {

			String str = opts[0].toString();
			
			HeaderItem item = AddressCollector.getHeaderItem((String) opts[0]);

			if (item == null) {
				item = new HeaderItem(HeaderItem.CONTACT);
				item.add("displayname", str);
				item.add("field", "To");
			} else {
				item = (HeaderItem) item.clone();
			}

			_table.setHeaderItem(item);

			String address = (String) item.get("displayname");
			if (address == null)
				address = (String) item.get("email;internet");

			System.out.println("address="+address);
			System.out.println("address-length="+address.length());
			
			//_editor.setCaretPosition(address.length()-1);

			System.out.println("cursor-pos="+cursor_pos);
			_editor.moveCaretPosition(cursor_pos);

			if (_comboBox != null) {
				try {

					_comboBox.showPopup();

				} catch (Exception ex) {
					ex.printStackTrace();
				}
			}

		}
	}

	private Object[] getMatchingOptions(String str) {

		_options = AddressCollector.getAddresses();

		Vector v = new Vector();
		for (int k = 0; k < _options.length; k++) {
			String item = _options[k].toString().toLowerCase();

			if (item.startsWith(str.toLowerCase())) {

				v.addElement(_options[k]);
			}
		}
		if (v.isEmpty())
			v.addElement(str);
		return v.toArray();
	}

	public void itemStateChanged(ItemEvent event) {
		if (event.getStateChange() == ItemEvent.SELECTED) {

			String selected = (String) _comboBox.getSelectedItem();

			HeaderItem item = AddressCollector.getHeaderItem(selected);

			if (item == null) {
				item = new HeaderItem(HeaderItem.CONTACT);
				item.add("displayname", selected);
				item.add("field", "To");
			} else {
				item = (HeaderItem) item.clone();
			}

			_table.setHeaderItem(item);

			String address = (String) item.get("displayname");
			if (address == null)
				address = (String) item.get("email;internet");

			//_editor.setCaretPosition(address.length());
			int pos2 = _editor.getCaretPosition();
			//_editor.setCaretPosition(0);
			if (cursor_pos != -1) {
				try {
					_editor.moveCaretPosition(pos2);
				} catch (IllegalArgumentException ex) {
					ex.printStackTrace();
				}
			}

		} else {
			System.out.println("not selected state");
		}
	}

}
 No newline at end of file